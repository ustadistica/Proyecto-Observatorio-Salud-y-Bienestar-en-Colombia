"""descarga_preparacion.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jk8b0rC8z9uUYww2p3GLTdRM5Xb24gfl
"""
###################################################################################################
from sodapy import Socrata
import pandas as pd
from datetime import datetime
######################################################################################################
# CONTRIBUTIVO 
# 1. Conexi√≥n p√∫blica
client = Socrata("www.datos.gov.co", None)

# 2. ID del dataset
dataset_id = "tq4m-hmg2"

# 2.1 Consultar metadatos (para ver √∫ltima actualizaci√≥n)
metadata = client.get_metadata(dataset_id)
fecha_actualizacion = metadata["rowsUpdatedAt"]  # timestamp en segundos
fecha_actualizacion = datetime.fromtimestamp(fecha_actualizacion).strftime("%Y-%m-%d %H:%M:%S")

print("üìÖ Fecha √∫ltima actualizaci√≥n en datos.gov.co:", fecha_actualizacion)

# 3. Descargar toda la base con paginaci√≥n
chunk_size = 5000000
offset = 0
all_data = []

while True:
    results = client.get(dataset_id, limit=chunk_size, offset=offset)
    if not results:
        break
    all_data.extend(results)
    offset += chunk_size
    print(f"Descargadas {offset} filas hasta ahora...")

# 4. Convertir a DataFrame
df = pd.DataFrame.from_records(all_data)

# 5. Agregar columna con la fecha de actualizaci√≥n
df["fecha_actualizacion"] = fecha_actualizacion

print("\n‚úÖ Descarga completa")
print("Tama√±o final:", df.shape)
print(df.head())

df.columns = ["G√©nero","Grupo etario","C√≥digo de la entidad","Nombre de la entidad","R√©gimen","Tipo de afiliado","Estado del afiliado","Condici√≥n del beneficiario","Zona de Afiliaci√≥n","Departamento","Municipio","tps_nvl_ssb_id","Nivel del Sisb√©n","Cantidad de registros","Fecha de actualizaci√≥n"]
df.head(10)

#############################################################################################################################################

# SUBSIDIADO 

# 1. Conexi√≥n a datos.gov.co (p√∫blica, sin token)
client2 = Socrata("www.datos.gov.co", None)

# 2. Definir ID del dataset (BDUA)
dataset_id = "d7a5-cnra"

# 2.1 Consultar metadatos (para ver √∫ltima actualizaci√≥n)
metadata = client.get_metadata(dataset_id)
fecha_actualizacion = metadata["rowsUpdatedAt"]  # timestamp en segundos
fecha_actualizacion = datetime.fromtimestamp(fecha_actualizacion).strftime("%Y-%m-%d %H:%M:%S")

print("üìÖ Fecha √∫ltima actualizaci√≥n en datos.gov.co:", fecha_actualizacion)

# 3. Descargar todos los registros usando paginaci√≥n autom√°tica
chunk_size = 5000000   # n√∫mero de filas por bloque (aj√∫stalo seg√∫n memoria disponible)
offset = 0
all_data = []

while True:
    # Descargar un bloque de datos
    results = client2.get(dataset_id, limit=chunk_size, offset=offset)

    # Si no llegan m√°s filas, se detiene el bucle
    if not results:
        break

    all_data.extend(results)
    offset += chunk_size
    print(f"Descargadas {offset} filas hasta ahora...")

# 4. Convertir todo a DataFrame de pandas
df_bdua = pd.DataFrame.from_records(all_data)

# 5. Agregar columna con la fecha de actualizaci√≥n
df_bdua["fecha_actualizacion"] = fecha_actualizacion

print("\n‚úÖ Descarga completa")
print("Tama√±o final:", df_bdua.shape)
print(df_bdua.head())

df_bdua.columns= ["G√©nero","Grupo etario","C√≥digo de la entidad","Nombre de la entidad","R√©gimen","Tipo de afiliado","Estado del afiliado","Condici√≥n del beneficiario","Zona de Afiliaci√≥n","Departamento","Municipio","Nivel del Sisb√©n","Grupo poblacional del afiliado","Cantidad de registros","Fecha de actualizaci√≥n"]
df_bdua.head(10)

#######################################################################################################################################################################################

# UNIR LAS BASES 

df_union = pd.concat([df, df_bdua], axis=0, ignore_index=True)
df_union = df_union.fillna(0)
df_union.head(10)

######################################################################################################################################################

# SHA 256
import hashlib

# 1. Funci√≥n para generar SHA256 en formato num√©rico
def generar_sha256_num(fila):
    fila_str = ''.join(str(x) for x in fila.values)
    # Convertimos a entero usando base 16
    return int(hashlib.sha256(fila_str.encode()).hexdigest(),16)


# 2. Aplicamos la funci√≥n fila por fila y creamos la nueva columna
df_union["hash_sha256_num"] = df_union.apply(generar_sha256_num, axis=1)

cols = ["hash_sha256_num"] + [c for c in df_union.columns if c != "hash_sha256_num"]
df_union = df_union[cols]


# 3. Contar cu√°ntos SHA256 son √∫nicos
num_unicos = df_union["hash_sha256_num"].nunique()
num_total = len(df_union)

print(f"Total filas: {num_total}")
print(f"SHA256 √∫nicos: {num_unicos}")
print(f"Repetidos: {num_total - num_unicos}")


df_union = df_union.drop_duplicates(subset=["hash_sha256_num"])

print("Shape after removing duplicates:", df_union.shape)
print(df_union.head())

df_union['id_fecha'] = df_union['hash_sha256_num'].astype(str) + "_" + df_union['Fecha de actualizaci√≥n'].astype(str)
print(df_union.head())

